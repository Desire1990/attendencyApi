@startuml
 package "api" {
    class "admin.LogEntry <Administration>" as admin.LogEntry #f4d6f1 {
        log entry
        --
        - id (AutoField)
        + action_time (DateTimeField)
        ~ user (ForeignKey)
        ~ content_type (ForeignKey)
        + object_id (TextField)
        + object_repr (CharField)
        + action_flag (PositiveSmallIntegerField)
        + change_message (TextField)
        --
    }
    admin.LogEntry *-- auth.User
    admin.LogEntry *-- contenttypes.ContentType


    class "auth.Permission <Authentication and Authorization>" as auth.Permission #e8f4d6 {
        permission
        --
        - id (AutoField)
        + name (CharField)
        ~ content_type (ForeignKey)
        + codename (CharField)
        --
    }
    auth.Permission *-- contenttypes.ContentType


    class "auth.Group <Authentication and Authorization>" as auth.Group #e8f4d6 {
        group
        --
        - id (AutoField)
        + name (CharField)
        # permissions (ManyToManyField)
        --
    }
    auth.Group *--* auth.Permission


    class "auth.User <Authentication and Authorization>" as auth.User #e8f4d6 {
        user
        --
        - id (AutoField)
        + password (CharField)
        + last_login (DateTimeField)
        + is_superuser (BooleanField)
        + username (CharField)
        + first_name (CharField)
        + last_name (CharField)
        + email (EmailField)
        + is_staff (BooleanField)
        + is_active (BooleanField)
        + date_joined (DateTimeField)
        # groups (ManyToManyField)
        # user_permissions (ManyToManyField)
        --
    }
    auth.User *--* auth.Group
    auth.User *--* auth.Permission


    class "contenttypes.ContentType <Content Types>" as contenttypes.ContentType #d6f4de {
        content type
        --
        - id (AutoField)
        + app_label (CharField)
        + model (CharField)
        --
    }


    class "sessions.Session <Sessions>" as sessions.Session #f4e1d6 {
        session
        --
        + session_key (CharField)
        + session_data (TextField)
        + expire_date (DateTimeField)
        --
    }


    class "api.LastLogin <Api>" as api.LastLogin #dbd6f4 {
        last login
        --
        + id (SmallAutoField)
        + date (DateTimeField)
        --
    }

class "api.Attendence <Api>" as api.Attendence #dbd6f4 {
    attendence
    --
     + id (SmallAutoField)
     ~ utilisateur (ForeignKey)
     + start_time (DateTimeField)
     + end_time (DateTimeField)
     + Approved_by (CharField)
     + hours (FloatField)
     } 
api.Attendence *-- api.Utilisateur

class "api.Leave <Api>" as api.Leave #dbd6f4 {
    leave
    --
     id SmallAutoField
     utilisateur ((ForeignKey))
     startdate (DateField)
     enddate (DateField)
     leavetype (CharField)
     reason (CharField)
     defaultdays (PositiveIntegerField)
     status (CharField)
     is_approved (BooleanField)
     updated (DateTimeField)
     created (DateTimeField)
     Approved_by (CharField)
    }
api.Leave *-- api.Utilisateur

class "api.Quotation <Api>" as api.Quotation #dbd6f4 {
    quotation
    --
     +id (SmallAutoField)
     ~utilisateur (ForeignKey)
     +mark (FloatField)
     } 
api.Quotation *-- api.Utilisateur

class "api.Service <Api>" as api.Service #dbd6f4 {
    service
    --
    + id (SmallAutoField)
    + name (CharField)
    + description (CharField)
    + created (DateTimeField)
    + updated (DateTimeField)
    --
}



class "api.Utilisateur <Api>" as api.Utilisateur #dbd6f4 {
    utilisateur
    --
     ~ attendance (ManyToOneRel)
     ~ leave (ManyToOneRel)
     ~ quotation (ManyToOneRel)
     + id (SmallAutoField)
     ~ user (OneToOneField)
     + avatar ImageField
     + is_valid BooleanField
     + service ForeignKey
     + mobile CharField
     + status CharField
     + address CharField
     + gender CharField
     + joined DateTimeField
     + birthday DateField
     + education CharField
     + fingerprint CharField
}
api.Utilisateur *-- api.Service


class "authtoken.Token <Auth Token>" as authtoken.Token #f4ecd6 {
    Token
    --
    + key (CharField)
    ~ user (OneToOneField)
    + created (DateTimeField)
    --
}


class "authtoken.TokenProxy <Auth Token>" as authtoken.TokenProxy #f4ecd6 {
    token
    --
    + key (CharField)
    ~ user (OneToOneField)
    + created (DateTimeField)
    --
}


class "django_rest_passwordreset.ResetPasswordToken <Django_Rest_Passwordreset>" as django_rest_passwordreset.ResetPasswordToken #ecf4d6 {
    Password Reset Token
    --
    - id (AutoField)
    ~ user (ForeignKey)
    + created_at (DateTimeField)
    + key (CharField)
    + ip_address (GenericIPAddressField)
    + user_agent (CharField)
    --
}
django_rest_passwordreset.ResetPasswordToken *-- auth.User

 } 
@enduml